# -*- coding: utf-8 -*-
"""DL_Lab6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dM0CLsMGGOAOrFEoyo3dOLHgL42NZc0i
"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pyplot as plt
from keras import regularizers
from keras.layers import Dropout

iris_data = load_iris()
X = iris_data.data
y = iris_data.target

y = to_categorical(y)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = Sequential()
model.add(Dense(64, input_shape=(X_train.shape[1],), activation='tanh'))
model.add(Dense(64, activation='tanh'))
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(X_train, y_train, epochs=200, batch_size=512, validation_data=(X_test, y_test), verbose=0)

loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')
print(f'Test Accuracy: {accuracy}')

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Test Loss')
plt.title('Loss vs Epoch')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

model1 = Sequential()
model1.add(Dense(64, input_shape=(X_train.shape[1],), activation='tanh', kernel_regularizer=regularizers.l1(0.001)))
model1.add(Dense(64, activation='tanh', kernel_regularizer=regularizers.l1(0.001)))
model1.add(Dense(64, activation='relu', kernel_regularizer=regularizers.l1(0.001)))
model1.add(Dense(3, activation='softmax'))

model1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
history1 = model1.fit(X_train, y_train, epochs=200, batch_size=512, validation_data=(X_test, y_test), verbose=1)

loss, accuracy = model1.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')
print(f'Test Accuracy: {accuracy}')

plt.plot(history1.history['loss'], label='Training Loss')
plt.plot(history1.history['val_loss'], label='Test Loss')
plt.title('Loss vs Epoch')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

model2 = Sequential()
model2.add(Dense(64, input_shape=(X_train.shape[1],), activation='tanh', kernel_regularizer=regularizers.l2(0.001)))
model2.add(Dense(64, activation='tanh', kernel_regularizer=regularizers.l2(0.001)))
model2.add(Dense(64, activation='relu', kernel_regularizer=regularizers.l2(0.001)))
model2.add(Dense(3, activation='softmax'))

model2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
history2 = model2.fit(X_train, y_train, epochs=200, batch_size=512, validation_data=(X_test, y_test), verbose=0)

loss, accuracy = model2.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')
print(f'Test Accuracy: {accuracy}')

plt.plot(history2.history['loss'], label='Training Loss')
plt.plot(history2.history['val_loss'], label='Test Loss')
plt.title('Loss vs Epoch')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

model3 = Sequential()
model3.add(Dense(64, input_shape=(X_train.shape[1],), activation='tanh'))
model3.add(Dropout(0.2))
model3.add(Dense(64, activation='tanh'))
model3.add(Dropout(0.2))
model3.add(Dense(64, activation='relu'))
model3.add(Dropout(0.2))
model3.add(Dense(3, activation='softmax'))

model3.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
history3 = model3.fit(X_train, y_train, epochs=200, batch_size=512, validation_data=(X_test, y_test), verbose=0)

loss, accuracy = model3.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')
print(f'Test Accuracy: {accuracy}')

plt.plot(history3.history['loss'], label='Training Loss')
plt.plot(history3.history['val_loss'], label='Test Loss')
plt.title('Loss vs Epoch')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

"""Q2"""